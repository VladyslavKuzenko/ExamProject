// <auto-generated />
using System;
using EasyLearn.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EasyLearn.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240927195036_m0")]
    partial class m0
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EasyLearn.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "user123",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "48ef1440-fe7d-4cbd-a44e-df9a77cb7773",
                            Email = "testuser1@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "testUser1",
                            NormalizedEmail = "TESTUSER1@EXAMPLE.COM",
                            NormalizedUserName = "TESTUSER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEMJP9v5ZC",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d1a9d712-3885-49e6-87e1-07287b4a06e0",
                            TwoFactorEnabled = false,
                            UserName = "testuser1"
                        },
                        new
                        {
                            Id = "user456",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ae5a5070-fb83-4e18-b477-211262d3f599",
                            Email = "testuser2@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "testUser2",
                            NormalizedEmail = "TESTUSER2@EXAMPLE.COM",
                            NormalizedUserName = "TESTUSER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEMJP9v5ZC",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3db87137-d0f6-43cd-988b-2b5f756fa6c4",
                            TwoFactorEnabled = false,
                            UserName = "testuser2"
                        });
                });

            modelBuilder.Entity("EasyLearn.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrainingModuleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainingModuleId");

                    b.ToTable("Card");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Definition = "A blueprint for creating objects",
                            Term = "Class",
                            TrainingModuleId = 1
                        },
                        new
                        {
                            Id = 2,
                            Definition = "An instance of a class",
                            Term = "Object",
                            TrainingModuleId = 1
                        },
                        new
                        {
                            Id = 3,
                            Definition = "The process of acquiring properties and behaviors from a parent class",
                            Term = "Inheritance",
                            TrainingModuleId = 2
                        });
                });

            modelBuilder.Entity("EasyLearn.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLearned")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastOpen")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Course");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Create = new DateTime(2024, 9, 27, 22, 50, 36, 129, DateTimeKind.Local).AddTicks(6502),
                            Description = "Basic course for C# programming",
                            IsLearned = false,
                            LastOpen = new DateTime(2024, 9, 27, 22, 50, 36, 129, DateTimeKind.Local).AddTicks(6558),
                            Name = "C# for Beginners",
                            UserId = "user123"
                        },
                        new
                        {
                            Id = 2,
                            Create = new DateTime(2024, 9, 27, 22, 50, 36, 129, DateTimeKind.Local).AddTicks(6561),
                            Description = "Advanced topics in C#",
                            IsLearned = false,
                            LastOpen = new DateTime(2024, 9, 27, 22, 50, 36, 129, DateTimeKind.Local).AddTicks(6562),
                            Name = "Advanced C#",
                            UserId = "user456"
                        });
                });

            modelBuilder.Entity("EasyLearn.Models.Folder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLearned")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastOpen")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Folder");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            Create = new DateTime(2024, 9, 27, 22, 50, 36, 129, DateTimeKind.Local).AddTicks(6598),
                            Description = "Introductory folder",
                            IsLearned = false,
                            LastOpen = new DateTime(2024, 9, 27, 22, 50, 36, 129, DateTimeKind.Local).AddTicks(6600),
                            Name = "Introduction",
                            UserId = "user123"
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            Create = new DateTime(2024, 9, 27, 22, 50, 36, 129, DateTimeKind.Local).AddTicks(6603),
                            Description = "Folder with advanced topics",
                            IsLearned = false,
                            LastOpen = new DateTime(2024, 9, 27, 22, 50, 36, 129, DateTimeKind.Local).AddTicks(6604),
                            Name = "Advanced Topics",
                            UserId = "user456"
                        });
                });

            modelBuilder.Entity("EasyLearn.Models.TrainingModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FolderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsLearned")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastOpen")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.HasIndex("UserId");

                    b.ToTable("TrainingModule");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Create = new DateTime(2024, 9, 27, 22, 50, 36, 129, DateTimeKind.Local).AddTicks(6636),
                            Description = "Learn the basics of C#",
                            FolderId = 1,
                            IsLearned = false,
                            LastOpen = new DateTime(2024, 9, 27, 22, 50, 36, 129, DateTimeKind.Local).AddTicks(6637),
                            Name = "C# Basics",
                            UserId = "user123"
                        },
                        new
                        {
                            Id = 2,
                            Create = new DateTime(2024, 9, 27, 22, 50, 36, 129, DateTimeKind.Local).AddTicks(6641),
                            Description = "Learn advanced C# features",
                            FolderId = 2,
                            IsLearned = false,
                            LastOpen = new DateTime(2024, 9, 27, 22, 50, 36, 129, DateTimeKind.Local).AddTicks(6642),
                            Name = "Advanced C# Features",
                            UserId = "user456"
                        });
                });

            modelBuilder.Entity("EasyLearn.Models.UserExas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("FolderId")
                        .HasColumnType("int");

                    b.Property<int?>("TrainingModuleId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserWhoCanReadId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("FolderId");

                    b.HasIndex("TrainingModuleId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserWhoCanReadId");

                    b.ToTable("UserExas");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EasyLearn.Models.Card", b =>
                {
                    b.HasOne("EasyLearn.Models.TrainingModule", "TrainingModule")
                        .WithMany("Cards")
                        .HasForeignKey("TrainingModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingModule");
                });

            modelBuilder.Entity("EasyLearn.Models.Course", b =>
                {
                    b.HasOne("EasyLearn.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Course_User");
                });

            modelBuilder.Entity("EasyLearn.Models.Folder", b =>
                {
                    b.HasOne("EasyLearn.Models.Course", "Course")
                        .WithMany("Folders")
                        .HasForeignKey("CourseId");

                    b.HasOne("EasyLearn.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Folder_User");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EasyLearn.Models.TrainingModule", b =>
                {
                    b.HasOne("EasyLearn.Models.Folder", "Folder")
                        .WithMany("TrainingModules")
                        .HasForeignKey("FolderId");

                    b.HasOne("EasyLearn.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TrainingModule_User");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("EasyLearn.Models.UserExas", b =>
                {
                    b.HasOne("EasyLearn.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("EasyLearn.Models.Folder", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId");

                    b.HasOne("EasyLearn.Models.TrainingModule", "TrainingModule")
                        .WithMany()
                        .HasForeignKey("TrainingModuleId");

                    b.HasOne("EasyLearn.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserExas_User");

                    b.HasOne("EasyLearn.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserWhoCanReadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_UserExas_UserWhoCanRead");

                    b.Navigation("Course");

                    b.Navigation("Folder");

                    b.Navigation("TrainingModule");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EasyLearn.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EasyLearn.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyLearn.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EasyLearn.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EasyLearn.Models.Course", b =>
                {
                    b.Navigation("Folders");
                });

            modelBuilder.Entity("EasyLearn.Models.Folder", b =>
                {
                    b.Navigation("TrainingModules");
                });

            modelBuilder.Entity("EasyLearn.Models.TrainingModule", b =>
                {
                    b.Navigation("Cards");
                });
#pragma warning restore 612, 618
        }
    }
}
