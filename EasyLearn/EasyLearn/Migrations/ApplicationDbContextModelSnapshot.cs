// <auto-generated />
using System;
using EasyLearn.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EasyLearn.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("EasyLearn.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "user123",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "81d38d61-a63e-4c5b-9f85-b479ab97641c",
                            Email = "testuser1@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "testUser1",
                            NormalizedEmail = "TESTUSER1@EXAMPLE.COM",
                            NormalizedUserName = "TESTUSER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEMJP9v5ZC",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bbb1307c-7efa-46fc-a248-f6228adcfcd0",
                            TwoFactorEnabled = false,
                            UserName = "testuser1"
                        },
                        new
                        {
                            Id = "user456",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "292dbeb7-fc97-413e-bcfc-8f69d3a9e404",
                            Email = "testuser2@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "testUser2",
                            NormalizedEmail = "TESTUSER2@EXAMPLE.COM",
                            NormalizedUserName = "TESTUSER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEMJP9v5ZC",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6ec0f02f-dad4-4295-abc5-cdedc391cf7c",
                            TwoFactorEnabled = false,
                            UserName = "testuser2"
                        });
                });

            modelBuilder.Entity("EasyLearn.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TrainingModuleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TrainingModuleId");

                    b.ToTable("Card", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Definition = "A blueprint for creating objects",
                            Term = "Class",
                            TrainingModuleId = 1
                        },
                        new
                        {
                            Id = 2,
                            Definition = "An instance of a class",
                            Term = "Object",
                            TrainingModuleId = 1
                        },
                        new
                        {
                            Id = 3,
                            Definition = "The process of acquiring properties and behaviors from a parent class",
                            Term = "Inheritance",
                            TrainingModuleId = 2
                        });
                });

            modelBuilder.Entity("EasyLearn.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Create")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsLearned")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastOpen")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Course", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Create = "2024-09-20 15:18:36.7488552",
                            Description = "Basic course for C# programming",
                            IsLearned = false,
                            LastOpen = "2024-09-20 15:18:36.7488604",
                            Name = "C# for Beginners",
                            UserId = "user123"
                        },
                        new
                        {
                            Id = 2,
                            Create = "2024-09-20 15:18:36.7488606",
                            Description = "Advanced topics in C#",
                            IsLearned = false,
                            LastOpen = "2024-09-20 15:18:36.7488607",
                            Name = "Advanced C#",
                            UserId = "user456"
                        });
                });

            modelBuilder.Entity("EasyLearn.Models.Folder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Create")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsLearned")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastOpen")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Folder", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            Create = "2024-09-20 15:18:36.7488634",
                            Description = "Introductory folder",
                            IsLearned = false,
                            LastOpen = "2024-09-20 15:18:36.7488635",
                            Name = "Introduction",
                            UserId = "user123"
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            Create = "2024-09-20 15:18:36.7488638",
                            Description = "Folder with advanced topics",
                            IsLearned = false,
                            LastOpen = "2024-09-20 15:18:36.7488639",
                            Name = "Advanced Topics",
                            UserId = "user456"
                        });
                });

            modelBuilder.Entity("EasyLearn.Models.TrainingModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Create")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FolderId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLearned")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastOpen")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.HasIndex("UserId");

                    b.ToTable("TrainingModule", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Create = "2024-09-20 15:18:36.7488669",
                            Description = "Learn the basics of C#",
                            FolderId = 1,
                            IsLearned = false,
                            LastOpen = "2024-09-20 15:18:36.7488671",
                            Name = "C# Basics",
                            UserId = "user123"
                        },
                        new
                        {
                            Id = 2,
                            Create = "2024-09-20 15:18:36.7488675",
                            Description = "Learn advanced C# features",
                            FolderId = 2,
                            IsLearned = false,
                            LastOpen = "2024-09-20 15:18:36.7488676",
                            Name = "Advanced C# Features",
                            UserId = "user456"
                        });
                });

            modelBuilder.Entity("EasyLearn.Models.UserExas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FolderId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TrainingModuleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserWhoCanReadId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("FolderId");

                    b.HasIndex("TrainingModuleId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserWhoCanReadId");

                    b.ToTable("UserExas", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EasyLearn.Models.Card", b =>
                {
                    b.HasOne("EasyLearn.Models.TrainingModule", "TrainingModule")
                        .WithMany("Cards")
                        .HasForeignKey("TrainingModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingModule");
                });

            modelBuilder.Entity("EasyLearn.Models.Course", b =>
                {
                    b.HasOne("EasyLearn.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Course_User");
                });

            modelBuilder.Entity("EasyLearn.Models.Folder", b =>
                {
                    b.HasOne("EasyLearn.Models.Course", "Course")
                        .WithMany("Folders")
                        .HasForeignKey("CourseId");

                    b.HasOne("EasyLearn.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Folder_User");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EasyLearn.Models.TrainingModule", b =>
                {
                    b.HasOne("EasyLearn.Models.Folder", "Folder")
                        .WithMany("TrainingModules")
                        .HasForeignKey("FolderId");

                    b.HasOne("EasyLearn.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TrainingModule_User");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("EasyLearn.Models.UserExas", b =>
                {
                    b.HasOne("EasyLearn.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("EasyLearn.Models.Folder", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId");

                    b.HasOne("EasyLearn.Models.TrainingModule", "TrainingModule")
                        .WithMany()
                        .HasForeignKey("TrainingModuleId");

                    b.HasOne("EasyLearn.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserExas_User");

                    b.HasOne("EasyLearn.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserWhoCanReadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserExas_UserWhoCanRead");

                    b.Navigation("Course");

                    b.Navigation("Folder");

                    b.Navigation("TrainingModule");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EasyLearn.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EasyLearn.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyLearn.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EasyLearn.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EasyLearn.Models.Course", b =>
                {
                    b.Navigation("Folders");
                });

            modelBuilder.Entity("EasyLearn.Models.Folder", b =>
                {
                    b.Navigation("TrainingModules");
                });

            modelBuilder.Entity("EasyLearn.Models.TrainingModule", b =>
                {
                    b.Navigation("Cards");
                });
#pragma warning restore 612, 618
        }
    }
}
