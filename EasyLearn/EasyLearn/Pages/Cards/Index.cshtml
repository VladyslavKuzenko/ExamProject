@page
@model EasyLearn.Pages.Cards.IndexModel

@{
    ViewData["Title"] = "Index";
}

<style>
    body {
        background-color: #0A082D;
    }

</style>

<h1 class="create-title" style="position:relative; left:100px; top:130px;">Word List </h1>

<div class="card-container">
    <div class="card" id="flashcard">
        <div class="card-face card-front">
            <span id="card-term">@Model.Card.FirstOrDefault()?.Term</span>
            @* <a asp-page="./Edit" asp-route-id="@Model.Card.FirstOrDefault()?.Id">Edit</a> *@

        </div>
        <div class="card-face card-back">
            <span id="card-definition">@Model.Card.FirstOrDefault()?.Definition</span>
            @* <a asp-page="./Edit" asp-route-id="@Model.Card.FirstOrDefault()?.Id">Edit</a> *@

        </div>
    </div>
</div>


<div class="navigation-buttons">
    <button id="prevBtn" disabled>⭠</button>
    <button id="nextBtn" @(Model.Card.Count <= 1 ? "disabled" : "")>⭢</button>
</div>

<div class="card-index">
    <span id="cardCounter">1/@Model.Card.Count</span>
</div>
<a asp-page="../TrainingModules/Edit" asp-route-id="@Model.TrainingModuleId">

    <div class="edit-card"></div>
</a>

<div class="game-container">
    <input type="button" name="name" value="Classic" class="classic-game-button" />
    <input type="button" name="name" value="Test" class="test-game-button" />
    <input type="button" name="name" value="Exam" class="exam-game-button" />
</div>

<div class="toggle-container">
    <p class="text-shuffle">Shuffle:</p>
    <input type="checkbox" name="name" value="Shuffle" class="random-game-button" />
</div>

<div id="question-container" style="display:none;">
    <h2 id="test-question"></h2>
    <div id="answer-options"></div>
    <p id="test-feedback"></p>
</div>

<div id="test-result" style="display:none;">
    <h2>Test Completed!</h2>
    <p id="score-result"></p>
    <button id="back-to-classic">Back to Classic</button>
</div>

<div id="currentMode" class="current-mode">Classic mode</div>


<script>
    // Отримуємо картки з моделі
    const originalCards = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Card.Select(c => new { c.Term, c.Definition })));
    console.log('Original Cards:', originalCards); // Дебаг
    let currentCards = [...originalCards]; // Поточний набір карток
    let currentIndex = 0;
    let isFlipped = false;
    let correctAnswers = 0; 
    let totalQuestions = 0; 


    const flashcard = document.getElementById('flashcard');
    const cardTerm = document.getElementById('card-term');
    const cardDefinition = document.getElementById('card-definition');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    const cardCounter = document.getElementById('cardCounter');
    const currentMode = document.getElementById('currentMode'); // Новий елемент

    const classicBtn = document.querySelector('.classic-game-button');
    const shuffleSwitch = document.querySelector('.random-game-button');
    const testBtn = document.querySelector('.test-game-button');
    const examBtn = document.querySelector('.exam-game-button');

    // Додаємо обробники подій для кнопок режимів
    classicBtn.addEventListener('click', () => {
        currentCards = [...originalCards];
        resetQuiz();
        updateCurrentMode('Classic');
        console.log('Switched to Classic Mode');
    });

    shuffleSwitch.addEventListener('change', () => {
        if (shuffleSwitch.checked) {
            currentCards = shuffleArray([...originalCards]); // Режим Shuffle
            resetQuiz();
            updateCurrentMode('Shuffle');
            console.log('Shuffle Mode On');
        } else {
            currentCards = [...originalCards]; // Повертаємось до класичного режиму
            resetQuiz();
            updateCurrentMode('Classic');
            console.log('Shuffle Mode Off, Classic Mode On');
        }
    });

    examBtn.addEventListener('click', () => {
        currentCards = generateExamCards(originalCards, 12);
        resetQuiz();
        updateCurrentMode('Exam');
        console.log('Switched to Exam Mode');
    });

    testBtn.addEventListener('click', () => {
        currentCards = shuffleArray([...originalCards]);
        totalQuestions = currentCards.length;
        correctAnswers = 0;
        resetQuiz();
        startTestMode();
        updateCurrentMode('Test');
        console.log('Switched to Test Mode');
    });

    // Клік по картці для перевертання
    flashcard.addEventListener('click', () => {
        flashcard.classList.toggle('flipped');
        isFlipped = !isFlipped;
    });

    // Клік по кнопці "Назад"
    prevBtn.addEventListener('click', () => {
        if (currentIndex > 0) {
            currentIndex--;
            updateCard();
        }
    });

    // Клік по кнопці "Вперед"
    nextBtn.addEventListener('click', () => {
        if (currentIndex < currentCards.length - 1) {
            currentIndex++;
            updateCard();
        }
    });

    function startTestMode() {
        document.getElementById('game-container').style.display = 'none';
        document.getElementById('question-container').style.display = 'block';
        currentIndex = 0;
        showTestQuestion();
    }

    // Функція для відображення поточного питання в тестовому режимі
    function showTestQuestion() {
        if (currentIndex < currentCards.length) {
            const currentCard = currentCards[currentIndex];
            document.getElementById('test-question').textContent = `What is the definition of "${currentCard.Term}"?`;

            // Генеруємо варіанти відповіді
            const answerOptions = generateAnswerOptions(currentCard);
            const answerOptionsDiv = document.getElementById('answer-options');
            answerOptionsDiv.innerHTML = ''; // Очищуємо попередні варіанти

            // Додаємо нові варіанти відповіді
            answerOptions.forEach(option => {
                const button = document.createElement('button');
                button.textContent = option;
                button.addEventListener('click', () => checkAnswer(option, currentCard.Definition));
                answerOptionsDiv.appendChild(button);
            });
        } else {
            finishTest();
        }
    }

    // Функція для генерації 4 варіантів відповіді
    function generateAnswerOptions(correctCard) {
        const allDefinitions = originalCards.map(card => card.Definition);
        const wrongOptions = allDefinitions.filter(def => def !== correctCard.Definition);
        const randomOptions = shuffleArray(wrongOptions).slice(0, 3); // 3 невірні варіанти
        const options = [...randomOptions, correctCard.Definition]; // Додаємо правильний варіант
        return shuffleArray(options); // Перемішуємо варіанти відповіді
    }

    // Функція для перевірки вибраної відповіді
    function checkAnswer(selectedAnswer, correctAnswer) {
        const feedback = document.getElementById('test-feedback');
        if (selectedAnswer === correctAnswer) {
            correctAnswers++;
            feedback.textContent = 'Correct!';
            feedback.style.color = 'green';
        } else {
            feedback.textContent = `Incorrect! The correct answer was: ${correctAnswer}`;
            feedback.style.color = 'red';
        }

        currentIndex++;
        setTimeout(() => {
            feedback.textContent = ''; // Очищуємо повідомлення після короткої паузи
            showTestQuestion(); // Показуємо наступне запитання
        }, 1500); // Затримка перед наступним питанням
    }

    // Функція для завершення тесту
    function finishTest() {
        document.getElementById('question-container').style.display = 'none';
        document.getElementById('test-result').style.display = 'block';
        document.getElementById('score-result').textContent = `You answered ${correctAnswers} out of ${totalQuestions} questions correctly.`;

        // Додаємо обробник для кнопки повернення в класичний режим
        document.getElementById('back-to-classic').addEventListener('click', () => {
            document.getElementById('test-result').style.display = 'none';
            document.getElementById('game-container').style.display = 'block';
            updateCurrentMode('Classic');
        });
    }

    // Функція для перемішування масиву (Рандомний режим)
    function shuffleArray(array) {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
        return array;
    }

    // Функція для генерації карток для екзамену
    function generateExamCards(array, total) {
        if (array.length >= total) {
            return shuffleArray([...array]).slice(0, total);
        } else {
            const result = [];
            for (let i = 0; i < total; i++) {
                const randomIndex = Math.floor(Math.random() * array.length);
                result.push(array[randomIndex]);
            }
            return result;
        }
    }

    // Функція для оновлення картки
    function updateCard() {
        if (isFlipped) {
            flashcard.classList.remove('flipped');
            isFlipped = false;

            flashcard.addEventListener('transitionend', function handler() {
                cardTerm.textContent = currentCards[currentIndex].Term;
                cardDefinition.textContent = currentCards[currentIndex].Definition;

                prevBtn.disabled = currentIndex === 0;
                nextBtn.disabled = currentIndex === currentCards.length - 1;

                cardCounter.textContent = `${currentIndex + 1}/${currentCards.length}`;

                flashcard.removeEventListener('transitionend', handler);
            });
        } else {
            cardTerm.textContent = currentCards[currentIndex].Term;
            cardDefinition.textContent = currentCards[currentIndex].Definition;

            prevBtn.disabled = currentIndex === 0;
            nextBtn.disabled = currentIndex === currentCards.length - 1;

            cardCounter.textContent = `${currentIndex + 1}/${currentCards.length}`;
        }
    }

    // Функція для скидання стану квізу
    function resetQuiz() {
        currentIndex = 0;
        isFlipped = false;
        flashcard.classList.remove('flipped');
        updateCard();
    }

    // Функція для оновлення поточного режиму
    function updateCurrentMode(mode) {
        currentMode.textContent = `${mode}`;
    }

    // Ініціалізація при завантаженні сторінки
    updateCard();
    updateCurrentMode('Classic'); // Встановлюємо початковий режим
</script>