@page
@model EasyLearn.Pages.Cards.IndexModel

@{
    ViewData["Title"] = "Index";
}

<style>
    body {
        background-color: #0A082D;
    }

    .main-container-game {
        width: 100%;
        height: 700px;
        position: relative;
        top: 100px;
    }
    
    /*     .return-container {
                position:relative;
                top:90px;
                display:flex;
                justify-content:center;
                width:70%;
                left:50.5%;
                transform:translate(-50%);
                z-index: 999;

            } */
    /*     .current-mode{
                color: white;
                font-weight: bold;
                font-size: 36px;
                display: flex;
                justify-content: center;
                top: 145px;
                position: relative;
                text-align: center;

                background-color:lime;
            }
         */
    #returnToClassic {
        background-color: #21273D;
        width: 115px;
        height: 40px;
        border: 1px solid white;
        border-radius: 10px;
        color: white;
        font-weight: bold;
        font-size: 14px;
        position: relative;
        left: 100%;
        transform: translate(-115px);
    }
    /*          #returnToClassic:hover {
                        background-color: darkred;
                        color: white;
                    } */

    #exam-term {
        color: white;
        font-weight: bold;
        display: flex;
        justify-content: center;
        position: relative;
        top: 100px;
    }

    #test-question {
        color: white;
        font-weight: bold;
        display: flex;
        justify-content: center;
        position: relative;
        top: 100px;
    }

    #exam-answer {
        font-weight: bold;
        display: flex;
        justify-content: center;
        position: relative;
        top: 130px;
        left: 50%;
        transform: translate(-50%);
        text-align: center;
        box-shadow: none;
        outline: none;
    }

    #submit-answer {
        border: none;
        width: 215px;
        height: 35px;
        background-color: deepskyblue;
        border-radius: 10px;
        top: 145px;
        position: relative;
        left: 50%;
        transform: translate(-50%);
    }

    /*     #question-container {
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
                margin-top: 50px;
            } */

    /* Стиль для заголовку тесту */
    #test-question {
        font-size: 24px;
        color: white;
        margin-bottom: 20px;
    }

    #answer-options {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 20px;
        position: relative;
        width: 80%;
        top: 152px;
        margin: 10px auto;
    }

        #answer-options button {
            background-color: #21273D;
            color: white;
            border: 2px solid lightgray;
            border-radius: 10px;
            padding: 15px 30px;
            cursor: pointer;
            font-size: 18px;
            width: 100%;
            text-align: center;
            transition: background-color 0.3s ease;
        }

            #answer-options button:hover {
                background-color: deepskyblue;
                color: white;
            }

    #test-feedback {
        margin-top: 15px;
        color: white;
        font-size: 18px;
    }

    header {
        top: 0;
    }

    .arrow-btn {
        position:relative;
        left:20%;
    }

</style>

    <a asp-page="/TrainingModules/Edit" asp-route-id="@Model.TrainingModuleId">
        <div class="edt">
        </div>
    </a>

<!-- Режим гри -->
<div id="currentMode" class="current-mode">Classic</div>

<div class="main-container-game">
    <!-- Контейнер для картки -->
    <div class="card-container">
        <div class="card" id="flashcard">
            <div class="card-face card-front">
                <span id="card-term">@Model.Card.FirstOrDefault()?.Term</span>
            </div>
            <div class="card-face card-back">
                <span id="card-definition">@Model.Card.FirstOrDefault()?.Definition</span>
            </div>
        </div>
    </div>
    <!-- Кнопки навігації -->
    <div class="navigation-buttons">
        <div class="arrow-btn">
            <button id="prevBtn" disabled>⭠</button>
            <button id="nextBtn" @(Model.Card.Count <= 1 ? "disabled" : "")>⭢</button>
        </div>
        <button id="backBtn">↺</button>
    </div>
    <!-- Лічильник карток -->
    <div class="card-index">
        <span id="cardCounter">1/@Model.Card.Count</span>
    </div>
    <!-- Кнопки для перемикання режимів -->
    <div class="game-container">
        <input type="button" name="name" value="Classic" class="classic-game-button" />
        <input type="button" name="name" value="Test" class="test-game-button" />
        <input type="button" name="name" value="Exam" class="exam-game-button" />
    </div>
    <!-- Кнопка для шафлу -->
    <div class="toggle-container">
        <p class="text-shuffle">Random</p>
        <input type="checkbox" name="name" value="Shuffle" class="random-game-button" />
    </div>
    <!-- Кнопка для повернення в класичний режим -->
    <div class="return-container" style="display:none;">
        <button id="returnToClassic">Return back</button>
    </div>

    <!-- Контейнер для тестових питань -->
    <div id="question-container" style="display:none;">
        <h1 class="exm">Test: @Model.TrainingModule.Name</h1>
        <div class="exmpm">

            <h2 id="test-question"></h2>
            <div id="answer-options"></div>
            <p id="test-feedback"></p>
        </div>
    </div>

    <!-- Контейнер для екзамену -->
    <div id="exam-container" style="display:none;">
        <h1 class="exm">Exam: @Model.TrainingModule.Name</h1>
        <div class="exmpm">
            <h2 id="exam-term"></h2>
            <input type="text" id="exam-answer" placeholder="Enter the definition" />
            <button id="submit-answer">Next</button>
            <p id="exam-feedback"></p>
        </div>
    </div>

    <!-- Результат тесту -->
    <div id="test-result" style="display:none;">
        <div class="exmpm">

            <h2 class="tsc">Test Completed!</h2>
            <p id="score-result"></p>
        </div>
    </div>

    <!-- Контейнер для лічильника (якщо тестовий режим) -->
    <div id="test-counter" style="display: none; text-align: center; color: white; margin-top: 15px;">
        Question <span id="current-question-number-test">1</span> of <span id="total-questions-test"></span>
    </div>

    <!-- Контейнер для лічильника (якщо екзаменаційний режим) -->
    <div id="exam-counter" style="display: none; text-align: center; color: white; margin-top: 15px;">
        Question <span id="current-question-number-exam">1</span> of <span id="total-questions-exam"></span>
    </div>

</div>
<script>
    const originalCards = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Card.Select(c => new { c.Term, c.Definition })));
    let currentCards = [...originalCards];
    let currentIndex = 0;
    let isFlipped = false;
    let correctAnswers = 0;
    let totalQuestions = 0;

    const flashcard = document.getElementById('flashcard');
    const cardTerm = document.getElementById('card-term');
    const cardDefinition = document.getElementById('card-definition');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    const cardCounter = document.getElementById('cardCounter');
    const currentMode = document.getElementById('currentMode');
    const classicBtn = document.querySelector('.classic-game-button');
    const testBtn = document.querySelector('.test-game-button');
    const examBtn = document.querySelector('.exam-game-button');
    const returnBtn = document.getElementById('returnToClassic');
    const gameContainer = document.querySelector('.game-container');
    const shuffleSwitch = document.querySelector('.random-game-button');
    const returnContainer = document.querySelector('.return-container');
    const questionContainer = document.getElementById('question-container');
    const examContainer = document.getElementById('exam-container');
    const testResult = document.getElementById('test-result');



    // Показати/сховати кнопки режимів і повернення
    function toggleGameElements(show) {
        gameContainer.style.display = show ? 'flex' : 'none';
        shuffleSwitch.style.display = show ? 'block' : 'none'; // Показуємо кнопку Shuffle в класичному режимі
        returnContainer.style.display = show ? 'none' : 'block';
    }

    backBtn.addEventListener('click', () => {
        currentIndex = 0;
        updateCard();
    });

    // Додаємо обробники подій для кнопок режимів
    classicBtn.addEventListener('click', () => {
        currentCards = [...originalCards];
        resetQuiz();
        toggleGameElements(true);
        flashcard.style.display = 'block';
        updateCurrentMode('');
        prevBtn.style.display = "inline-block";
        nextBtn.style.display = "inline-block";
        cardCounter.style.display = "inline-block";
    });

    testBtn.addEventListener('click', () => {
        currentCards = shuffleArray([...originalCards]);
        totalQuestions = currentCards.length;
        correctAnswers = 0;
        resetQuiz();
        startTestMode();
        prevBtn.style.display = "none";
        nextBtn.style.display = "none";
        cardCounter.style.display = "none";
        backBtn.style.display = "none";
    });

    examBtn.addEventListener('click', () => {
        currentCards = shuffleArray([...originalCards]);
        totalQuestions = currentCards.length;
        correctAnswers = 0;
        resetQuiz();
        startExamMode();
        prevBtn.style.display = "none";
        nextBtn.style.display = "none";
        cardCounter.style.display = "none";
        backBtn.style.display = "none";
    });

    returnBtn.addEventListener('click', () => {
        currentCards = [...originalCards];
        resetQuiz();
        toggleGameElements(true);
        questionContainer.style.display = 'none';
        examContainer.style.display = 'none';
        testResult.style.display = 'none';
        flashcard.style.display = 'block';
        backBtn.style.display = "inline-block";
        updateCurrentMode('');
        hideCounters();
    });

    shuffleSwitch.addEventListener('change', () => {
        if (shuffleSwitch.checked) {
            currentCards = shuffleArray([...originalCards]);
        } else {
            currentCards = [...originalCards];
        }
        resetQuiz();
    });


    // Функція для старту тестового режиму (додано показ лічильника)
    function startTestMode() {
        toggleGameElements(false);
        questionContainer.style.display = 'block';
        document.getElementById('test-counter').style.display = 'block'; // Показуємо лічильник тесту
        flashcard.style.display = 'none';
        currentIndex = 0;
        showTestQuestion();
        showCounters();
        updateTestCounter(); // Оновлюємо лічильник

    }

    // Функція для старту екзаменаційного режиму (додано показ лічильника)
    function startExamMode() {
        toggleGameElements(false);
        examContainer.style.display = 'block';
        document.getElementById('exam-counter').style.display = 'block'; // Показуємо лічильник екзамену
        flashcard.style.display = 'none';
        currentIndex = 0;
        showExamQuestion();
        showCounters();
        updateExamCounter(); // Оновлюємо лічильник
    }


    // Показ екзаменаційного питання
    function showExamQuestion() {
        if (currentIndex < currentCards.length && currentIndex < totalQuestions) {
            const currentCard = currentCards[currentIndex];
            document.getElementById('exam-term').textContent = `${currentCard.Term}`;
            document.getElementById('exam-answer').value = ''; // Очищуємо поле вводу
            document.getElementById('exam-feedback').textContent = ''; // Очищуємо фідбек

            updateExamCounter(); // Оновлюємо лічильник
        } else {
            finishTest();
        }
    }

    // Перевірка відповіді в екзаменаційному режимі
    document.getElementById('submit-answer').addEventListener('click', () => {
        const currentCard = currentCards[currentIndex];
        const userAnswer = document.getElementById('exam-answer').value.trim();
        const feedback = document.getElementById('exam-feedback');

        if (userAnswer.toLowerCase() === currentCard.Definition.toLowerCase()) {
            correctAnswers++;
        } else {
        }

        currentIndex++;
        setTimeout(showExamQuestion, 500); // Переходимо до наступного питання через 1.5 секунди
    });

    function hideCounters() {
        document.getElementById('test-counter').style.display = 'none';
        document.getElementById('exam-counter').style.display = 'none';
    }
    function showCounters() {
        document.getElementById('test-counter').style.display = 'block';
        document.getElementById('exam-counter').style.display = 'block';
    }

    function showTestQuestion() {
        if (currentIndex < currentCards.length && currentIndex < totalQuestions) {
            const currentCard = currentCards[currentIndex];
            document.getElementById('test-question').textContent = `${currentCard.Term}`;

            // Генеруємо варіанти відповідей
            const answerOptions = generateAnswerOptions(currentCard);
            const answerOptionsDiv = document.getElementById('answer-options');
            answerOptionsDiv.innerHTML = ''; // Очищуємо попередні варіанти

            // Додаємо нові варіанти відповіді
            answerOptions.forEach(option => {
                const button = document.createElement('button');
                button.textContent = option;
                button.addEventListener('click', () => {
                    checkAnswer(option, currentCard.Definition);
                    updateExamCounter(); // Оновлюємо лічильник
                });
                answerOptionsDiv.appendChild(button);
            });

            currentIndex++;
        } else {
            finishTest();
        }
    }

    // Завершення тесту/екзамену
    function finishTest() {
        questionContainer.style.display = 'none';
        examContainer.style.display = 'none';
        testResult.style.display = 'block';
        document.getElementById('score-result').textContent = `You answered ${correctAnswers} out of ${totalQuestions} correctly!`;
        document.getElementById('test-counter').style.display = 'none'; // Показуємо лічильник тесту
        document.getElementById('exam-counter').style.display = 'none'; // Показуємо лічильник тесту

    }

    // Перевірка відповіді в тестовому режимі
    function checkAnswer(selectedAnswer, correctAnswer) {
        const feedback = document.getElementById('test-feedback');
        if (selectedAnswer === correctAnswer) {
            correctAnswers++;
        } else {
        }
        setTimeout(() => {
            feedback.textContent = '';
            showTestQuestion();
        }, 500);
    }

    // Скидання стану тесту
    function resetQuiz() {
        currentIndex = 0;
        updateCard();
    }

    function updateTestCounter() {
        document.getElementById('current-question-number-test').textContent = currentIndex + 1;
        document.getElementById('total-questions-test').textContent = totalQuestions;
    }

    // Counter for Test & Exam
    function updateExamCounter() {
        document.getElementById('current-question-number-exam').textContent = currentIndex + 1;
        document.getElementById('total-questions-exam').textContent = totalQuestions;
    }

    // Оновлення картки (при перемиканні між режимами)
    function updateCard() {
        cardTerm.textContent = currentCards[currentIndex].Term;
        cardDefinition.textContent = currentCards[currentIndex].Definition;

        prevBtn.disabled = currentIndex === 0;
        nextBtn.disabled = currentIndex === currentCards.length - 1;
        cardCounter.textContent = `${currentIndex + 1}/${currentCards.length}`;
    }

    // Логіка для перевертання картки
    flashcard.addEventListener('click', () => {
        if (!isFlipped) {
            flashcard.classList.add('flipped');
        } else {
            flashcard.classList.remove('flipped');
        }
        isFlipped = !isFlipped;
    });

    prevBtn.addEventListener('click', () => {
        if (currentIndex > 0) {
            currentIndex--;
            updateCard();
        }
    });

    nextBtn.addEventListener('click', () => {
        if (currentIndex < currentCards.length - 1) {
            currentIndex++;
            updateCard();
        }
    });

    // Ініціалізація при завантаженні сторінки
    updateCard();
    updateCurrentMode(''); // Встановлюємо початковий режим

    // Оновлення режиму
    function updateCurrentMode(mode) {
        currentMode.textContent = `${mode}`;
        prevBtn.style.display = "inline-block";
        nextBtn.style.display = "inline-block";
        cardCounter.style.display = "inline-block";
    }

    // Перемішування масиву
    function shuffleArray(array) {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
        return array;
    }

    // Генерація варіантів відповідей для тестового режиму
    function generateAnswerOptions(correctCard) {
        const incorrectAnswers = currentCards.filter(card => card.Term !== correctCard.Term);
        const randomOptions = shuffleArray(incorrectAnswers).slice(0, 3);
        randomOptions.push(correctCard);
        return shuffleArray(randomOptions.map(option => option.Definition));
    }
</script>
