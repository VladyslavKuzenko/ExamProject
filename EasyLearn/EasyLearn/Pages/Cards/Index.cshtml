@page
@model EasyLearn.Pages.Cards.IndexModel

@{
    ViewData["Title"] = "Index";
}

<style>
    body {
        background-color: #0A082D;
    }

</style>

<h1 class="create-title" style="position:relative; left:100px;">Word List </h1>

<div class="card-container">
    <div class="card" id="flashcard">
        <div class="card-face card-front">
            <span id="card-term">@Model.Card.FirstOrDefault()?.Term</span>
            @* <a asp-page="./Edit" asp-route-id="@Model.Card.FirstOrDefault()?.Id">Edit</a> *@

        </div>
        <div class="card-face card-back">
            <span id="card-definition">@Model.Card.FirstOrDefault()?.Definition</span>
            @* <a asp-page="./Edit" asp-route-id="@Model.Card.FirstOrDefault()?.Id">Edit</a> *@

        </div>
    </div>
</div>


<div class="navigation-buttons">
    <button id="prevBtn" disabled>⭠</button>
    <button id="nextBtn" @(Model.Card.Count <= 1 ? "disabled" : "")>⭢</button>
</div>

<div class="card-index">
    <span id="cardCounter">1/@Model.Card.Count</span>
</div>
<a asp-page="../TrainingModules/Edit" asp-route-id="@Model.TrainingModuleId">

    <div class="edit-card"></div>
</a>

<div class="game-container">
<input type="button" name="name" value="Classic" class="classic-game-button" />
    <input type="button" name="name" value="Random" class="random-game-button" />
<input type="button" name="name" value="Exam" class="test-game-button" />
</div>
<div id="currentMode" class="current-mode">Classic mode</div>




@* <table class="table" style="position:relative; top:100px;">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Card[0].Term)

            </th>
            <th>
                @Html.DisplayNameFor(model => model.Card[0].Definition)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Card[0].TrainingModule)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>

@foreach (var item in Model.Card) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Term)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Definition)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TrainingModule.Name)
            </td>
                <div class="items">
                    <a asp-page="./Edit" asp-route-id="@item.Id">Edit</a> |
                    <a asp-page="./Details" asp-route-id="@item.Id">Details</a> |
                    <a asp-page="./Delete" asp-route-id="@item.Id">Delete</a>
                </div>
        </tr>
}
      
    </tbody>
</table> *@

<script>
    // Отримуємо картки з моделі
    const originalCards = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Card.Select(c => new { c.Term, c.Definition })));
    console.log('Original Cards:', originalCards); // Дебаг
    let currentCards = [...originalCards]; // Поточний набір карток
    let currentIndex = 0;
    let isFlipped = false;

    const flashcard = document.getElementById('flashcard');
    const cardTerm = document.getElementById('card-term');
    const cardDefinition = document.getElementById('card-definition');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    const cardCounter = document.getElementById('cardCounter');
    const currentMode = document.getElementById('currentMode'); // Новий елемент

    const classicBtn = document.querySelector('.classic-game-button');
    const randomBtn = document.querySelector('.random-game-button');
    const examBtn = document.querySelector('.test-game-button');

    // Додаємо обробники подій для кнопок режимів
    classicBtn.addEventListener('click', () => {
        currentCards = [...originalCards];
        resetQuiz();
        updateCurrentMode('Classic');
        console.log('Switched to Classic Mode');
    });

    randomBtn.addEventListener('click', () => {
        currentCards = shuffleArray([...originalCards]);
        resetQuiz();
        updateCurrentMode('Random');
        console.log('Switched to Random Mode');
    });

    examBtn.addEventListener('click', () => {
        currentCards = generateExamCards(originalCards, 12);
        resetQuiz();
        updateCurrentMode('Exam');
        console.log('Switched to Exam Mode');
    });

    // Клік по картці для перевертання
    flashcard.addEventListener('click', () => {
        flashcard.classList.toggle('flipped');
        isFlipped = !isFlipped;
    });

    // Клік по кнопці "Назад"
    prevBtn.addEventListener('click', () => {
        if (currentIndex > 0) {
            currentIndex--;
            updateCard();
        }
    });

    // Клік по кнопці "Вперед"
    nextBtn.addEventListener('click', () => {
        if (currentIndex < currentCards.length - 1) {
            currentIndex++;
            updateCard();
        }
    });

    // Функція для перемішування масиву (Рандомний режим)
    function shuffleArray(array) {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
        return array;
    }

    // Функція для генерації карток для екзамену
    function generateExamCards(array, total) {
        if (array.length >= total) {
            return shuffleArray([...array]).slice(0, total);
        } else {
            const result = [];
            for (let i = 0; i < total; i++) {
                const randomIndex = Math.floor(Math.random() * array.length);
                result.push(array[randomIndex]);
            }
            return result;
        }
    }

    // Функція для оновлення картки
    function updateCard() {
        if (isFlipped) {
            flashcard.classList.remove('flipped');
            isFlipped = false;

            flashcard.addEventListener('transitionend', function handler() {
                cardTerm.textContent = currentCards[currentIndex].Term;
                cardDefinition.textContent = currentCards[currentIndex].Definition;

                prevBtn.disabled = currentIndex === 0;
                nextBtn.disabled = currentIndex === currentCards.length - 1;

                cardCounter.textContent = `${currentIndex + 1}/${currentCards.length}`;

                flashcard.removeEventListener('transitionend', handler);
            });
        } else {
            cardTerm.textContent = currentCards[currentIndex].Term;
            cardDefinition.textContent = currentCards[currentIndex].Definition;

            prevBtn.disabled = currentIndex === 0;
            nextBtn.disabled = currentIndex === currentCards.length - 1;

            cardCounter.textContent = `${currentIndex + 1}/${currentCards.length}`;
        }
    }

    // Функція для скидання стану квізу
    function resetQuiz() {
        currentIndex = 0;
        isFlipped = false;
        flashcard.classList.remove('flipped');
        updateCard();
    }

    // Функція для оновлення поточного режиму
    function updateCurrentMode(mode) {
        currentMode.textContent = `${mode}`;
    }

    // Ініціалізація при завантаженні сторінки
    updateCard();
    updateCurrentMode('Classic'); // Встановлюємо початковий режим
</script>