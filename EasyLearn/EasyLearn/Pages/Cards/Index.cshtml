@page
@model EasyLearn.Pages.Cards.IndexModel

@{
    ViewData["Title"] = "Index";
}

<style>
    body {
        background-color: #0A082D;
    }
</style>

<h1 class="create-title" style="position:relative; left:100px; top:130px;">Word List</h1>

<!-- Контейнер для картки -->
<div class="card-container">
    <div class="card" id="flashcard">
        <div class="card-face card-front">
            <span id="card-term">@Model.Card.FirstOrDefault()?.Term</span>
        </div>
        <div class="card-face card-back">
            <span id="card-definition">@Model.Card.FirstOrDefault()?.Definition</span>
        </div>
    </div>
</div>

<!-- Кнопки навігації -->
<div class="navigation-buttons">
    <button id="prevBtn" disabled>⭠</button>
    <button id="nextBtn" @(Model.Card.Count <= 1 ? "disabled" : "")>⭢</button>
</div>

<!-- Лічильник карток -->
<div class="card-index">
    <span id="cardCounter">1/@Model.Card.Count</span>
</div>

<!-- Кнопки для перемикання режимів -->
<div class="game-container">
    <input type="button" name="name" value="Classic" class="classic-game-button" />
    <input type="button" name="name" value="Test" class="test-game-button" />
    <input type="button" name="name" value="Exam" class="exam-game-button" />
</div>

<!-- Кнопка для шафлу -->
<div class="toggle-container">
    <p class="text-shuffle">Shuffle:</p>
    <input type="checkbox" name="name" value="Shuffle" class="random-game-button" />
</div>

<!-- Кнопка для повернення в класичний режим -->
<div class="return-container" style="display:none;">
    <button id="returnToClassic">Return to Classic Mode</button>
</div>

<!-- Контейнер для тестових питань -->
<div id="question-container" style="display:none;">
    <h2 id="test-question"></h2>
    <div id="answer-options"></div>
    <p id="test-feedback"></p>
</div>

<!-- Контейнер для екзамену -->
<div id="exam-container" style="display:none;">
    <h2 id="exam-term"></h2>
    <input type="text" id="exam-answer" placeholder="Enter the definition" />
    <button id="submit-answer">Submit Answer</button>
    <p id="exam-feedback"></p>
</div>

<!-- Результат тесту -->
<div id="test-result" style="display:none;">
    <h2>Test Completed!</h2>
    <p id="score-result"></p>
</div>

<!-- Режим гри -->
<div id="currentMode" class="current-mode">Classic mode</div>

<script>
    const originalCards = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Card.Select(c => new { c.Term, c.Definition })));
    let currentCards = [...originalCards];
    let currentIndex = 0;
    let isFlipped = false;
    let correctAnswers = 0;
    let totalQuestions = 0;

    const flashcard = document.getElementById('flashcard');
    const cardTerm = document.getElementById('card-term');
    const cardDefinition = document.getElementById('card-definition');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    const cardCounter = document.getElementById('cardCounter');
    const currentMode = document.getElementById('currentMode');
    const classicBtn = document.querySelector('.classic-game-button');
    const testBtn = document.querySelector('.test-game-button');
    const examBtn = document.querySelector('.exam-game-button');
    const returnBtn = document.getElementById('returnToClassic');
    const gameContainer = document.querySelector('.game-container');
    const shuffleSwitch = document.querySelector('.random-game-button');
    const returnContainer = document.querySelector('.return-container');
    const questionContainer = document.getElementById('question-container');
    const examContainer = document.getElementById('exam-container');
    const testResult = document.getElementById('test-result');

    // Показати/сховати кнопки режимів і повернення
    function toggleGameElements(show) {
        gameContainer.style.display = show ? 'block' : 'none';
        shuffleSwitch.style.display = show ? 'block' : 'none'; // Показуємо кнопку Shuffle в класичному режимі
        returnContainer.style.display = show ? 'none' : 'block';
    }

    // Додаємо обробники подій для кнопок режимів
    classicBtn.addEventListener('click', () => {
        currentCards = [...originalCards];
        resetQuiz();
        toggleGameElements(true);
        flashcard.style.display = 'block';
        updateCurrentMode('Classic');
    });

    testBtn.addEventListener('click', () => {
        currentCards = shuffleArray([...originalCards]);
        totalQuestions = currentCards.length;
        correctAnswers = 0;
        resetQuiz();
        startTestMode();
        updateCurrentMode('Test');
    });

    examBtn.addEventListener('click', () => {
        currentCards = shuffleArray([...originalCards]);
        totalQuestions = 12; // Екзамен на 12 питань
        correctAnswers = 0;
        resetQuiz();
        startExamMode();
        updateCurrentMode('Exam');
    });

    returnBtn.addEventListener('click', () => {
        toggleGameElements(true);
        questionContainer.style.display = 'none';
        examContainer.style.display = 'none';
        testResult.style.display = 'none';
        flashcard.style.display = 'block';
        updateCurrentMode('Classic');
    });

    shuffleSwitch.addEventListener('change', () => {
        if (shuffleSwitch.checked) {
            currentCards = shuffleArray([...originalCards]);
        } else {
            currentCards = [...originalCards];
        }
        resetQuiz();
    });

    // Функція для старту тестового режиму
    function startTestMode() {
        toggleGameElements(false);
        questionContainer.style.display = 'block';
        flashcard.style.display = 'none';
        currentIndex = 0;
        showTestQuestion();
    }

    // Функція для старту екзаменаційного режиму
    function startExamMode() {
        toggleGameElements(false);
        examContainer.style.display = 'block';
        flashcard.style.display = 'none';
        currentIndex = 0;
        showExamQuestion();
    }

    // Показ екзаменаційного питання
    function showExamQuestion() {
        if (currentIndex < currentCards.length && currentIndex < totalQuestions) {
            const currentCard = currentCards[currentIndex];
            document.getElementById('exam-term').textContent = `Term: "${currentCard.Term}"`;
            document.getElementById('exam-answer').value = ''; // Очищуємо поле вводу
            document.getElementById('exam-feedback').textContent = ''; // Очищуємо фідбек
        } else {
            finishTest();
        }
    }

    // Перевірка відповіді в екзаменаційному режимі
    document.getElementById('submit-answer').addEventListener('click', () => {
        const currentCard = currentCards[currentIndex];
        const userAnswer = document.getElementById('exam-answer').value.trim();
        const feedback = document.getElementById('exam-feedback');

        if (userAnswer.toLowerCase() === currentCard.Definition.toLowerCase()) {
            correctAnswers++;
            feedback.textContent = 'Correct!';
        } else {
            feedback.textContent = `Incorrect! The correct definition was: "${currentCard.Definition}"`;
        }

        currentIndex++;
        setTimeout(showExamQuestion, 1500); // Переходимо до наступного питання через 1.5 секунди
    });

    // Функція для показу питання у тестовому режимі
    function showTestQuestion() {
        if (currentIndex < currentCards.length && currentIndex < totalQuestions) {
            const currentCard = currentCards[currentIndex];
            document.getElementById('test-question').textContent = `What is the definition of "${currentCard.Term}"?`;

            // Генеруємо варіанти відповідей
            const answerOptions = generateAnswerOptions(currentCard);
            const answerOptionsDiv = document.getElementById('answer-options');
            answerOptionsDiv.innerHTML = ''; // Очищуємо попередні варіанти

            // Додаємо нові варіанти відповіді
            answerOptions.forEach(option => {
                const button = document.createElement('button');
                button.textContent = option;
                button.addEventListener('click', () => checkAnswer(option, currentCard.Definition));
                answerOptionsDiv.appendChild(button);
            });

            currentIndex++;
        } else {
            finishTest();
        }
    }

    // Завершення тесту/екзамену
    function finishTest() {
        questionContainer.style.display = 'none';
        examContainer.style.display = 'none';
        testResult.style.display = 'block';
        document.getElementById('score-result').textContent = `You answered ${correctAnswers} out of ${totalQuestions} correctly!`;
    }

    // Перевірка відповіді в тестовому режимі
    function checkAnswer(selectedAnswer, correctAnswer) {
        const feedback = document.getElementById('test-feedback');
        if (selectedAnswer === correctAnswer) {
            correctAnswers++;
            feedback.textContent = 'Correct!';
        } else {
            feedback.textContent = `Incorrect! The correct answer is "${correctAnswer}".`;
        }
        setTimeout(() => {
            feedback.textContent = '';
            showTestQuestion();
        }, 1500);
    }

    // Скидання стану тесту
    function resetQuiz() {
        currentIndex = 0;
        updateCard();
    }

    // Оновлення картки (при перемиканні між режимами)
    function updateCard() {
        cardTerm.textContent = currentCards[currentIndex].Term;
        cardDefinition.textContent = currentCards[currentIndex].Definition;

        prevBtn.disabled = currentIndex === 0;
        nextBtn.disabled = currentIndex === currentCards.length - 1;
        cardCounter.textContent = `${currentIndex + 1}/${currentCards.length}`;
    }

    // Логіка для перевертання картки
    flashcard.addEventListener('click', () => {
        if (!isFlipped) {
            flashcard.classList.add('flipped');
        } else {
            flashcard.classList.remove('flipped');
        }
        isFlipped = !isFlipped;
    });

    prevBtn.addEventListener('click', () => {
        if (currentIndex > 0) {
            currentIndex--;
            updateCard();
        }
    });

    nextBtn.addEventListener('click', () => {
        if (currentIndex < currentCards.length - 1) {
            currentIndex++;
            updateCard();
        }
    });

    // Ініціалізація при завантаженні сторінки
    updateCard();
    updateCurrentMode('Classic'); // Встановлюємо початковий режим

    // Оновлення режиму
    function updateCurrentMode(mode) {
        currentMode.textContent = `${mode} mode`;
    }

    // Перемішування масиву
    function shuffleArray(array) {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
        return array;
    }

    // Генерація варіантів відповідей для тестового режиму
    function generateAnswerOptions(correctCard) {
        const incorrectAnswers = currentCards.filter(card => card.Term !== correctCard.Term);
        const randomOptions = shuffleArray(incorrectAnswers).slice(0, 3);
        randomOptions.push(correctCard);
        return shuffleArray(randomOptions.map(option => option.Definition));
    }
</script>
