@page
@model EasyLearn.Pages.TrainingModules.EditModel
<style>
    body {
        background-color: #0A082D;
    }
</style>
@{
    ViewData["Title"] = "Edit";
    int cardIndex = 0; // Start from 0 for correct indexing
}

<h2 class="create-title">Edit cards</h2>

<form method="post">
    <div class="form-group">
        <label asp-for="Name" class="control-label"></label>
        <input asp-for="Name" class="form-control" />
        <span asp-validation-for="Name" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Description" class="control-label"></label>
        <input asp-for="Description" class="form-control" />
        <span asp-validation-for="Description" class="text-danger"></span>
    </div>

    <div id="cards-container">
        @for (int i = 0; i < Model.Cards.Count; i++)
        {
            <hr style="height:15px; background-color:#0A082D;" />
            <label class="gg" style="color:white; font-weight:bold;">Card @cardIndex</label>
            <div class="card-box">
                <div class="form-group">
                    <label class="gg">Term</label>
                    <input type="text" name="Cards[@i].Term" value="@Model.Cards[@i].Term" class="form-control shire" />
                </div>
                <div class="form-group">
                    <label class="gg">Description</label>
                    <input type="text" name="Cards[@i].Definition" value="@Model.Cards[@i].Definition" class="form-control shire" />
                </div>
            </div>
            cardIndex++; // No need for @{ ... } here
        }
    </div>

    <button type="button" class="btn btn-secondary" id="add-card">+ ДОДАТИ КАРТКУ</button>

    <div class="form-group mt-3">
        <input type="submit" value="Save" class="btn btn-primary create-module-button " />
    </div>
    <a asp-page="../TrainingModules/Delete" asp-route-id="@Model.Id">
        <div class="delete-card"></div>
    </a>
</form>

@section Scripts {
    <script>
        let cardIndex = @cardIndex; // Start from the count of existing cards

        document.getElementById('add-card').addEventListener('click', function () {
            let container = document.getElementById('cards-container');

            // Flag to check if all card fields are filled
            let allFilled = true;

            // Check all existing cards
            const cardBoxes = container.querySelectorAll('.card-box');
            cardBoxes.forEach((cardBox, index) => {
                let termInput = cardBox.querySelector(`input[name^="Cards"][name$=".Term"]`);
                let definitionInput = cardBox.querySelector(`input[name^="Cards"][name$=".Definition"]`);

                if (!termInput.value.trim() || !definitionInput.value.trim()) {
                    allFilled = false;
                    // Optionally, you can add a visual indicator to the empty fields
                    termInput.classList.add('is-invalid');
                    definitionInput.classList.add('is-invalid');
                } else {
                    // Remove the invalid class if the field is filled
                    termInput.classList.remove('is-invalid');
                    definitionInput.classList.remove('is-invalid');
                }
            });

            if (!allFilled) {
                alert('Please fill in all existing card fields before adding a new card.');
                return;
            }

            // Add a new card if all fields are filled
            let cardHtml = `
                        <hr style="height:15px; background-color:#0A082D;" />
                        <label class="gg" style="color:white; font-weight:bold;">Card ${cardIndex + 1}</label>
                        <div class="card-box">
                            <div class="form-group">
                                <label class="gg">Term</label>
                                <input type="text" name="Cards[${cardIndex}].Term" class="form-control shire" />
                            </div>
                            <div class="form-group">
                                <label class="gg">Description</label>
                                <input type="text" name="Cards[${cardIndex}].Definition" class="form-control shire" />
                            </div>
                        </div>`;

            // Append the new card to the existing cards container
            container.insertAdjacentHTML('beforeend', cardHtml);

            cardIndex++; // Increment index after adding a new card
        });
    </script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
