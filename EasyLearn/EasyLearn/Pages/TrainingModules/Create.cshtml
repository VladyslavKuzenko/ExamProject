@page
@model EasyLearn.Pages.TrainingModules.CreateModel

<style>
    body {
        background-color: #0A082D;
        color: white;
    }

    .create-title {
        text-align: center;
        font-size: 2em;
        color: white;
    }

    .control-label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }

    .form-control {
        width: 100%;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .text-danger {
        color: red;
        font-size: 0.9em;
    }

    #cards-container {
        border-radius: 10px;
        margin-top: 120px; /* Відстань між контейнером і верхніми елементами */
    }

    .card-box {
        padding: 45px;
        border-radius: 8px;
        background-color: #2E3756; /* Колір фону для картки */
        margin-bottom: 15px; /* Відстань між картками */
        display: flex; /* Вирівнюємо картки горизонтально */
        justify-content: space-between; /* Відстань між полями */
    }

    .form-group {
        width: 48%; /* Ширина полів */
        margin-right: 20px; /* Відступ справа */
    }

        .form-group:last-child {
            margin-right: 0; /* Прибираємо відступ у останнього елемента */
        }

    .shire {
        width: 100%; /* 100% від батька */
        background-color: transparent;
        border: none;
        border-bottom: 4px solid white;
        color: white;
        border-radius: 0;
        position: relative;
        top: -70px; /* Ваше позиціонування */
    }

        .shire:focus {
            background-color: #2E3756;
            border-bottom: 5px solid yellow;
            outline: none;
            box-shadow: none;
            color: white;
        }

    #add-card {
        background-color: #2E3756;
        color: white;
        width: 100%;
        height: 140px;
        border: none;
        font-weight: bold;
        font-size: 16px;
        border-bottom: 5px solid aquamarine;
        cursor: pointer;
        border-radius: 5px;
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 26px;
    }

        #add-card:hover {
            background-color: #3E4A68;
        }

    .create-module-button {
        background-color: #007BFF;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        position:relative;
        left:0%;
        top:-100px;
    }

        .create-module-button:hover {
            background-color: #0056b3;
        }
        .card-number {
            margin-left:-20px;
        margin-top: -32px;
        font-weight:bold;
    }


</style>

<div class="top-page-library-modules">
<h2 class="create-title">Створити модуль із картками</h2>

<form method="post">
    <div class="form-group">
            <label asp-for="Name" class="control-label"></label>
            <input asp-for="Name" class="form-control" maxlength="25"/>
            <span asp-validation-for="Name" class="text-danger"></span>
            <small id="nameHelp" class="form-text text-muted"></small>
    </div>
    <div class="form-group">
        <label asp-for="Description" class="control-label"></label>
        <input asp-for="Description" class="form-control" maxlength="180"/>
        <span asp-validation-for="Description" class="text-danger"></span>
            <small id="descriptionHelp" class="form-text text-muted"></small>

    </div>

    <div id="cards-container">
            <hr style="height:5px; width:100%; opacity:1; background-color:#0A082D; position:relative; top:65px;" />
            <div class="card-box">
                <div class="card-number" style="">1</div>
                <div class="form-group">
                    <label class="gg">Term</label>
                    <input type="text" name="Cards[0].Term" class="form-control shire" />
                </div>
                <div class="form-group">
                    <label class="gg">Definition</label>
                    <input type="text" name="Cards[0].Definition" class="form-control shire" />
                </div>
                <button type="button" class="btn btn-danger remove-card">Видалити</button>
            </div>
    </div>

    <button type="button" class="btn btn-secondary" id="add-card">+ ДОДАТИ КАРТКУ</button>

    <div class="form-group mt-3">
        <input type="submit" value="Create" class="btn btn-primary create-module-button " />
    </div>
</form>
</div>
@section Scripts {
    <script>
        let cardIndex = 1;

        document.getElementById('add-card').addEventListener('click', function () {
            let container = document.getElementById('cards-container');

            // Flag to check if all card fields are filled
            let allFilled = true;

            // Check all existing cards
            const cardItems = container.querySelectorAll('.card-box');
            cardItems.forEach((cardItem) => {
                let termInput = cardItem.querySelector(`input[name^="Cards"][name$=".Term"]`);
                let definitionInput = cardItem.querySelector(`input[name^="Cards"][name$=".Definition"]`);

                if (!termInput.value.trim() || !definitionInput.value.trim()) {
                    allFilled = false;
                    // Add a visual indicator to the empty fields
                    termInput.classList.add('is-invalid');
                    definitionInput.classList.add('is-invalid');
                } else {
                    // Remove the invalid class if the field is filled
                    termInput.classList.remove('is-invalid');
                    definitionInput.classList.remove('is-invalid');
                }
            });

            if (!allFilled) {
                alert('Please fill in all existing card fields before adding a new card.');
                return;
            }

            // Якщо всі поля заповнені, додаємо нову картку
            let cardHtml = `
            <hr style="height:5px; width:100%; opacity:1; background-color:#0A082D; position:relative; top:65px;" />
            <div class="card-box">
                <div class="card-number" style="">${cardIndex + 1}</div>

                <div class="form-group">
                            <label  >Term</label>
                            <input type="text" name="Cards[${cardIndex}].Term" class="form-control shire" />
                </div>
                <div class="form-group">
                    <label class="gg">Definition</label>
                    <input type="text" name="Cards[${cardIndex}].Definition" class="form-control shire" />
                </div>
                <button type="button" class="btn btn-danger remove-card">Видалити</button>

            </div>`;



            container.insertAdjacentHTML('beforeend', cardHtml);
            cardIndex++;
            updateRemoveButtonState(); 
            updateCardNumbers(); 
        });

            document.getElementById("Name").addEventListener("input", function () {
                const maxLength = 30;
                const currentLength = this.value.length;

                if (currentLength >= maxLength) {
                document.getElementById("nameHelp").innerText = "You have reached the maximum length (30 characters).";
                } else {
                    document.getElementById("nameHelp").innerText = "";
                }
            });
        document.getElementById("Description").addEventListener("input", function () {
            const maxLength = 180;
            const currentLength = this.value.length;

            if (currentLength >= maxLength) {
                document.getElementById("descriptionHelp").innerText = "You have reached the maximum length (180 characters).";
            } else {
                document.getElementById("descriptionHelp").innerText = "";
            }
        });


        document.getElementById('cards-container').addEventListener('click', function (event) {
            if (event.target.classList.contains('remove-card')) {
                const cardBox = event.target.closest('.card-box');
                const hr = cardBox.previousElementSibling; // Знаходимо пов'язаний label (номер картки)

                hr.remove();
                cardBox.remove(); // Видаляємо картку
                updateRemoveButtonState(); // Оновлюємо стан кнопок "Видалити"
                updateCardNumbers(); // Оновлюємо нумерацію карток
            }
        });
        // Функція для оновлення стану кнопок "Видалити"
        function updateRemoveButtonState() {
            const removeButtons = document.querySelectorAll('.remove-card');
            removeButtons.forEach(button => button.disabled = false); // Усі кнопки активні
            if (removeButtons.length === 1) {
                removeButtons[0].disabled = true; // Якщо є лише одна картка, робимо кнопку неактивною
            }
        }

        // Функція для оновлення нумерації карток
        function updateCardNumbers() {
            const cardCounters = document.querySelectorAll('.card-number');
            cardCounters.forEach((label, index) => {
                label.innerText = `${index + 1}`;
            });

            const cardBoxes = document.querySelectorAll('.card-box');
            cardBoxes.forEach((cardBox, index) => {
                const termInput = cardBox.querySelector('input[name^="Cards"][name$=".Term"]');
                const definitionInput = cardBox.querySelector('input[name^="Cards"][name$=".Definition"]');
                termInput.name = `Cards[${index}].Term`;
                definitionInput.name = `Cards[${index}].Definition`;
            });
        }

        // Оновлюємо стан кнопок "Видалити" на завантаженні сторінки
        updateRemoveButtonState();


    </script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
